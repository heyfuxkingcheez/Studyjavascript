    // 경고창을 출력합니다.
    alert('alert() 함수의 출력')

    // 콘솔에 출력합니다.
    console.log('console.log() 메서드의 출력')

    // 논리 부정 연산자
    !불
    
    //단항 연산자 : 피연산자가 하나
    //이항 연산자 : 피연산자가 두 개
    //삼항 연산자 : 피연산자가 세 개

    // 논리 합 연산자
    연산자: ||(또는)
    형태: 불 || 불 - 적어도 하나만 ture면 전체 값이 true

    
    // 논리 곱 연산
    연산자: &&(그리고)
    형태: 불 && 불 - 양쪽 모든 것이 true여야 전체 값이 ture
    
    // `α < x && x < β` 닫힌 범위를 나타낼 때
    // `x < α || β < x` 열린 범위를 나타낼 때

    // 식별자를 상수/변수로 사용하겠다! ->선언 또는 정의
    // `식별자 = '지료' -> 할당한다!
    //처음으로 값을 할당하는 것 -> 초기화
    // 상수
    const 식별자 = '자료'

    // 변수
    let 식별자 = '자료'
    let 식별자
    식별자 = '자료'

    // = : 오른쪽에 있는 것을 왼쪽에 넣는 방향성을 가진 연산자
    // pi = 3.14 O
    // 3.14 = pi X


    // # 여담

    // ## 상수와 변수의 사용 범위
    // 상수는 언제쓰고? -> 기본적
    // 변수는 언제쓰지? -> 변수!
    
    //C, Java, C#, C++
    //->코드를 작성 컴파일(전체적으로 최적화 후 실행)

    // Ruby, Pytho, 자바스크립트, 루아
    //-> 기본적으로 인터프리터(한줄 한줄 볼때마다 실행하는) 언어
    //-> 컴파일 최적화 힘듦 

    // 자바스크립트
    // -> 어떻게든 해볼테니, 정보를 줘!!
    // -> 상수와 변수 나누어서 꼭 사용하는 것이 좋다.

    // ## lvalue rvalrue
    // let a = 10
    // a -> left value -> lvalue -> 넣는 놈
    // 10 -> right value -> rvalue -> 꺼내는 놈, 값

    // undefined 자료형
    // 1. 상수와 변수로 선언하지 않은 식별자
    // 
    // 2. 값이 없는 변수

// a++
// 현재 문장을 실행한 후에 a += 1

// ++a
// 현재 문장을 실행하기 전에 a += 1

// # 문자열 -> 숫자
//"123" -> 123
//number("안녕하세요") -> 숫자!

// Not a Numer -> NaN
// -> Typeof(NaN) -> "Number"
// 
// # 숫자 -> 문자열 ok
//123 -> "123"

# 불 -> 문자열
String(true) -> "true"
String(false) -> "false"

# 불 -> 숫자
Number(true) -> 1
Number(false) -> 0
1 -> 켜져있다, 존재하다
0 -> 꺼져있다, 존재하지 않는다

# 다른 자료형 -> 불
5가지 경우 -> false
0, NaN, "", null, undefined

# 스텍과 힙

저장을 할 때 사용하는 공간
- 스텍(stack): 스택스택 쌓는 공간
- 기본 자료형은 직접!
- 복합 자료형은 그 주소(address)

- 힙(heap): 힙힙 던져서 쌓는 공간[대충 큰 것들을 던져서 쌓은 공간]
- 복합 자료형의 본체가 저장!

# 파괴적 처리 and 비파괴적 처리
처리 후에
-원본이 변경되었다 -> 파괴적 처리
-원본이 살아있다 -> 비파괴적 처리

# const의 제한
const -> 스텍에 있는 값을 변경할 때 오류!
-> 힙에 있는 레퍼런스된 복합 자료형을 조작하는 것에는 문제가 X

나머지 매개변수
fucntion (...매개변수) {}

-> 배열!


전개 연산자
함수(...배열)


//구 버전 자바스크립트에서 전개 연산자 구현하기
(...input) = .apply(null, array)


